import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:$gradleCoverallsVersion")
    }
    repositories {
        mavenLocal()
        jcenter()
    }
}
repositories {
    mavenLocal()
    jcenter()
    //Forced to use it for org.cloudfoundry:spring-boot-cf-service-broker,
    // maven { url "http://repo.spring.io/libs-snapshot" }
    //URL repo to get the desired compiled version
    maven { url "https://jitpack.io" }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply from: 'test.gradle'
apply from: 'coverage.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filesMatching( '**/*.properties' ) {
            filter(ReplaceTokens, tokens: [version: project.version])
        }
    }
}

processTestResources {
    from(sourceSets.test.resources.srcDirs) {
        filesMatching( '**/*.properties' ) {
            filter(ReplaceTokens, tokens: [version: project.version])
        }
    }
}

war {
    baseName = "$domainName.$projectName"
    version =  version
}
war.rootSpec.exclude "cloudfoundry_client.properties"

task wrapper(type: Wrapper) {
    gradleVersion = "2.7"
}

bootRun {
    // to retrieve profile using -Dspring.profiles.active={PROFILE}
    systemProperties = System.properties
    // static classpath resources reloadable in the live application
    addResources = true
}

dependencies {
    // Lombok
    providedCompile "org.projectlombok:lombok:$lombokVersion"
    //Spring boot
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    // For now /actuator should be available if hateoas in the classpath. Tested it, does not work.
    // compile "org.springframework.boot:spring-boot-starter-hateoas:$springBootVersion"

    //Groovy templates
    compile "org.codehaus.groovy:groovy-templates:${groovyVersion}"
    //API Service broker
    //compile("org.cloudfoundry:spring-boot-cf-service-broker:$cfServiceBrokerVersion")
    compile("com.github.cloudfoundry-community:spring-boot-cf-service-broker:$cfServiceBrokerCommitId")
    //Client library
    compile "org.cloudfoundry:cloudfoundry-client-lib:$cfClientLibVersion"
    //Logs
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    // Spring Data
    compile "org.springframework.data:spring-data-jpa:$springDataJpaVersion"
    compile "org.springframework.data:spring-data-redis:$springDataRedisVersion"
    // MySQL Persistence
    runtime "mysql:mysql-connector-java:$mysqlConnectorVersion"
    compile "commons-dbcp:commons-dbcp"
    compile "org.hibernate:hibernate-entitymanager"
    //runtime "com.h2database:h2"
    // Redis Persistence
    compile "redis.clients:jedis:$redisJedisVersion"
    // Spring Cloud
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudServiceConnectorVersion"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudCFConnectorVersion"

}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile
