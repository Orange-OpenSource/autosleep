//fork from https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
apply plugin: 'jacoco'
apply plugin: "com.github.kt3k.coveralls"

ext {
    limits = [
            'instruction': 75,
            'branch'     : 25,
            'line'       : 85,
            'complexity' : 75,
            'method'     : 90,
            'class'      : 90
    ]
}

jacocoTestReport {
    reports {
        //XML required by coveralls and for the below coverage checks
        xml.enabled true
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        logger.quiet("************************ Code Coverage ************************")
        logger.quiet("*")
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("* ${it.key.padLeft(15)} coverage rate: ${it.value}% \tminimum is ${limit}% \t\t> FAIL")
            } else {
                logger.quiet("* ${it.key.padLeft(15)} coverage rate: ${it.value}% \tminimum is ${limit}% \t\t> OK")
            }
        }

        if (failures) {
            logger.quiet("*")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("*")
            logger.quiet("* Code Coverage Failed !")
            logger.quiet("***************************************************************")
            throw new GradleException("Code Coverage Failed !")
        } else{
            logger.quiet("*")
            logger.quiet("* Passed Code Coverage Checks !")
            logger.quiet("***************************************************************")
        }

    }
}
check.dependsOn jacocoTestReport