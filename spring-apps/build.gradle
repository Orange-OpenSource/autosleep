import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Autosleep
 * Copyright (C) 2016 Orange
 * Authors: Benjamin Einaudi   benjamin.einaudi@orange.com
 *          Arnaud Ruffin      arnaud.ruffin@orange.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

subprojects {

    apply plugin: 'spring-boot'
    apply plugin: 'war'

    dependencies {
        compile project(':common')
        testCompile project(':common')

        //retrieve common tests as dependency for subtests (testutils,etc...)
        testCompile project (path: ":common", configuration: 'testArtifacts')

        //Spring Cloud CF connector
        compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector"

        //Spring boot
        compile "org.springframework.boot:spring-boot-starter-web"

        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }

    configurations {
        providedRuntime
    }

    bootRun {
        // to retrieve profile using -Dspring.profiles.active={PROFILE}
        systemProperties = System.properties
        // static classpath resources reloadable in the live application
        addResources = true
    }

    war {
        baseName = "$domainName.$rootProjectName.$project.name"
        version = version

        //prevent default tar and zip files to be built
       // distZip.enabled = false
        jar.enabled = false
    }
    war.rootSpec.exclude "cloudfoundry_client.properties"

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            filesMatching('**/*.properties') {
                filter(ReplaceTokens, tokens: [version: project.version])
            }
        }
    }

    processTestResources {
        from(sourceSets.test.resources.srcDirs) {
            filesMatching('**/*.properties') {
                filter(ReplaceTokens, tokens: [version: project.version])
            }
        }
    }

}

